

https://www.cnblogs.com/unqiang/p/12052308.html


一、Go的内存分配核心思想
    Go是内置运行时的编程语言(runtime)，像这种内置运行时的编程语言通常会抛弃传统的内存分配方式，改为自己管理
这样可以完成类似预分配、内存池等操作，以避开系统调用带来的性能问题，防止每次分配内存都需要系统调用；

二、内存分配的核心如下几点：
    1）每次从操作系统申请一大块儿的内存，由Go来对这块儿内存做分配，减少系统调用
    2）内存分配算法采用Google的 TCMalloc算法。算法比较复杂，究其原理可自行查阅。其核心思想就是把内存切分的非常的细小，分为多级管理，以降低锁的粒度
    3）回收对象内存时，并没有将其真正释放掉，只是放回预先分配的大块内存中，以便复用。
       只有内存闲置过多的时候，才会尝试归还部分内存给操作系统，降低整体开销

三、Go的内存结构

    1. 内存管理单元:
        分配器将其管理的内存分为两种:
            span:  由多个连续的page内存页[page大小: 8KB] 组成的 "大内存块";
            object:将span按照特定大小切分成多个小块，每一小块都可以存储对象;
        用途:
            span面向内部管理
            object面向对象分配


    2. Go在程序启动的时候，会分配一块连续的内存（虚拟内存），结构如下
        名称：    Spans区域 | bitmap区域 | arena区域
        大小：      512M       16GB        512GB
解释：
    spans和bitmap都会根据arena的动态变化而动态调整大小

        ***1）arena:
            是什么?
                1. arena区域就是我们通常所说的heap（堆区）
                2. 一些page页组合起来成为: mspan

            结构是什么样的？
                1. 从管理分配角度(span): 由多个连续的page内存页[page大小: 8KB] 组成的 "大内存块";
                2. 从使用角度出发(object): 就是平时所了解的: heap中存在很多 "对象" 或 "实体";

            结构包含如下两个:
                这两部分主要被spans和bitmap这两块非heap区域的内存所对应
                1）基本的内存管理单元
                2）程序运行时候生成的对象或实体

        2）bitmap：主要的作用还是服务于GC垃圾回收机制，用于标记arena区域中的一个page是否被GC标记
            2.1 bitmap分为好几种，这里说的是heap bitmap；
            2.2 bitmap是由   高地址  ->  低地址 增长；
            2.3 bitmap区域中的一个byte对应arena区域的四个指针大小的内存的结构
          作用：
                1）用作标记arena（即heap）中的对象，分为如下两种（所以占用2个bit位）：
                    a. 标记对应地址中是否存在对象；
                    b. 标记此对象是否被gc标记过，也就是是否被GC垃圾回收机制回收；

        3）spans：
            3.1 管理分配arena(即heap)的区域，表示arena区中的某一页(page)属于哪个 mspan；
            3.2 用于存放mspan的指针，每个指针指向 arena 的一个page；


四、内存管理组件
    内存管理组件主要有： mspan、mcache、mcentral、mheap

解释：
    mspan：内存管理的基本单元，直接存储数据的地方
    mcache：每个运行期的goroutine都会绑定的一个mcache（具体来讲是 绑定的GMP并发模型中的 P，所以可以无锁分配mspan），
            mcache会分配goroutine运行中所需要的内存空间（即mspan）
    mcentral：为所有 mcache切分好后备的mspan；
    mheap：代表Go程序持有的所有堆空间，还会管理闲置的span，需要时向操作系统申请新内存；




















